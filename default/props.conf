# props.conf

###########################################
#			nmon converted csv stanza			#
###########################################

# This sourcetype stanza will be used to index nmon csv converted data
# Every generated csv file will contain a CSV header used by Splunk to identify fields

[nmon_data]

FIELD_DELIMITER=,
FIELD_QUOTE="
HEADER_FIELD_LINE_NUMBER=1

# your settings
INDEXED_EXTRACTIONS=csv
NO_BINARY_CHECK=1
SHOULD_LINEMERGE=false
TIMESTAMP_FIELDS=ZZZZ
TIME_FORMAT=%d-%m-%Y %H:%M:%S

# set by detected source type
KV_MODE=none
pulldown_type=true

# Overwritting default host field based on event data for nmon_data sourcetype (useful when managing Nmon central shares)
TRANSFORMS-hostfield=nmon_data_hostoverride

# OStype generation from nmon_inventory data has been removed in V1.7.3 since the field is generated at the row data level since V1.6.15
# The nmon_inventory lookup table is now stored in a KV collection

# A bug has affected string replacement in nmon2csv.py before V1.1.10
# This can lead the LPAR section cpu usage stated vs VP to be returned as null
# This alias will prevent the problem was previously indexed data
FIELDALIAS-VP_IdlePCT = VP_IdlePCT AS VP_Idle_PCT

### frameID ###

#
# NEW ! Starting with V1.5.0, use the frameID to automatically associate hosts with the Frame IDs, like associating AIX hosts with PSeries names for example
# In default configuration, the "frameid" will be equivalent to the host Serial Number using the above Alias

FIELDALIAS-frameID = serialnum AS frameID

# To create your custom association (automatic lookup)

# 1. Create a custom local/transforms.conf to configure your lookup table (see transforms.conf)
# 2. Create a custom local/props.conf with a [nmon_data] stanza
# 3. Configure your automatic lookup to overwrite the frameID field (use OUTPUT, don't use OUTPUTNEW which wont't overwrite the frameID field)

# LOOKUP-PSERIES = my_lookup_table serialnum AS serialnum OUTPUT PSERIES AS frameID

########################################
# CIM normalization / NMON extractions #
########################################

# When applicabe, be CIM compliant

# Various CIM
FIELDALIAS-dest = host as dest
EVAL-hypervisor_id = if(isnotnull(frameID), frameID, serialnum)

#
# Non CIM and Power arch common, unify AIX and PowerLinux stats to a common model at search extraction time
#

# For Power arch micro-partitions (AIX & PowerLinux)
EVAL-lpar_vp_usage = case(OStype=="AIX", round(((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT)*virtualCPUs/100),3), OStype=="Linux", round(PhysicalCPU,3))
EVAL-lpar_vp_usage_PCT = case(OStype=="AIX", round((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT),2), OStype=="Linux", round((PhysicalCPU/partition_active_processors*100),2))

# For Power arch micro-partitions Pool statistics (AIX & PowerLinux)
# Note: For PowerLinux, at the perf collection startup the pool usage may report almost 100% usage which is incorrect, filtering with pool_idle_time>"0.1" will prevent from loading these data

EVAL-lpar_pool_vp_usage = case(OStype=="AIX", round((poolCPUs-PoolIdle),3), OStype="Linux", case(pool_idle_time>"0.1" AND pool_idle_time<(pool_capacity/100), round(((pool_capacity/100)-pool_idle_time),3)) )
EVAL-lpar_pool_vp_usage_PCT = case(OStype=="AIX", round(((poolCPUs-PoolIdle)*100/poolCPUs),2), OStype="Linux", case(pool_idle_time>"0.1" AND pool_idle_time<(pool_capacity/100), round(((pool_capacity/100)-pool_idle_time)/(pool_capacity/100)*100,2)) )

# Normalize capacity information
EVAL-lpar_pool_capacity = case(OStype=="AIX", poolCPUs, OStype="Linux", (pool_capacity/100))
EVAL-lpar_vp_capacity = case(OStype=="AIX", virtualCPUs, OStype="Linux", partition_active_processors)
EVAL-lpar_entitled_capacity = case(OStype=="AIX", entitled, OStype="Linux", partition_entitled_capacity)

# CIM normalization for cpu metrics

EVAL-cpu_load_percent = case(match(type,"CPU.*"), (Sys_PCT+User_PCT+Wait_PCT), type=="TOP", pct_CPU, type=="LPAR", round((VP_User_PCT+VP_Sys_PCT+VP_Wait_PCT+VP_Idle_PCT),2), OStype=="Linux", round((PhysicalCPU/partition_active_processors*100),2) )
FIELDALIAS-cpu_load_user = User_PCT as cpu_user_percent
# Non CIM, but provides good visibility on these fields, and this looks like logical
FIELDALIAS-cpu_load_sys = Sys_PCT as cpu_sys_percent
FIELDALIAS-cpu_load_wait = Wait_PCT as cpu_wait_percent
FIELDALIAS-cpu_load_idle = Idle_PCT as cpu_idle_percent

# Non CIM: provide the same fields evaluation in logical CPU units
EVAL-cpu_load_logicalcpus = case(match(type,"CPU_ALL"), ((Sys_PCT+User_PCT+Wait_PCT)/100*logical_cpus))
EVAL-cpu_user_logicalcpus = case(match(type,"CPU_ALL"), (User_PCT/100*logical_cpus))
EVAL-cpu_wait_logicalcpus = case(match(type,"CPU_ALL"), (Wait_PCT/100*logical_cpus))
EVAL-cpu_idle_logicalcpus = case(match(type,"CPU_ALL"), (Idle/100*logical_cpus))

# CIM normalization for common memory metrics

# Total memory available in MB (for AIX / Linux / Solaris)
EVAL-mem = case(isnotnull(Real_total_MB), Real_total_MB, isnotnull(memtotal), memtotal)
EVAL-mem_free = case(isnotnull(Real_free_MB), Real_free_MB, isnotnull(memfree), memfree)
EVAL-mem_used = case(type=="MEM", (case(isnotnull(Real_total_MB), (Real_total_MB-Real_free_MB), isnotnull(memtotal), (memtotal-memfree))), type="TOP", case(OStype="AIX", (ResSet), OStype="Linux", (ResSet), OStype="Solaris", ResSize))

# Non CIM: For Linux, create the effective mem_used and mem_free, effective means memory less buffers and cached that can be free by the kernel if it required
# Volume of buffers and cached are by default accounted in the memory being used, therefore this is can be considered as a level memory available for system and application needs
# For other OS, these fields will be created for convenient use but are they are equal to previously calculated fields
EVAL-mem_used_effective = case(type=="MEM", (case(isnotnull(Real_total_MB), (Real_total_MB-Real_free_MB), isnotnull(cached), ((memtotal-(buffers+cached))-memfree), isnotnull(memtotal), memtotal-memfree)))
EVAL-mem_free_effective = case(isnotnull(Real_free_MB), Real_free_MB, isnotnull(cached), (memfree+(buffers+cached)), isnotnull(memtotal), memfree)

# Evaluate at the props level the percentile versions of memory statistics
EVAL-mem_used_PCT = case(isnotnull(Real_total_MB), round((((Real_total_MB-Real_free_MB)/Real_total_MB)*100),2), isnotnull(memtotal), round((((memtotal-memfree)/memtotal)*100),2))
EVAL-mem_free_PCT = case(isnotnull(Real_Free_PCT), Real_Free_PCT, isnotnull(memtotal), round(((memfree/memtotal)*100),2))
EVAL-mem_used_effective_PCT = case(isnotnull(Real_total_MB), round((((Real_total_MB-Real_free_MB)/Real_total_MB)*100),2), isnotnull(cached), round((((((memtotal-(buffers+cached))-memfree))/memtotal)*100),2), isnotnull(memtotal), round((((memtotal-memfree)/memtotal)*100),2))
EVAL-mem_free_effective_PCT = case(isnotnull(Real_Free_PCT), Real_Free_PCT, isnotnull(cached), round((((memfree+(buffers+cached))/memtotal)*100),2), isnotnull(memtotal), round(((memfree/memtotal)*100),2))

# Non CIM: For Linux, eval cached, buffers, active and inactive in PCT
EVAL-cached_PCT = case(isnotnull(cached), round(((cached/memtotal)*100),2))
EVAL-buffers_PCT = case(isnotnull(buffers), round(((buffers/memtotal)*100),2))
EVAL-active_PCT = case(isnotnull(active), round(((active/memtotal)*100),2))
EVAL-inactive_PCT = case(isnotnull(inactive), round(((inactive/memtotal)*100),2))

# Total virtual memory available in MB (for AIX / Linux / Solaris)
EVAL-swap = case(isnotnull(Virtual_total_MB), Virtual_total_MB, isnotnull(swaptotal), swaptotal)
EVAL-swap_free = case(isnotnull(Virtual_free_MB), Virtual_free_MB, isnotnull(swapfree), swapfree)
EVAL-swap_used = case(isnotnull(Virtual_total_MB), (Virtual_total_MB-Virtual_free_MB), isnotnull(swaptotal), (swaptotal-swapfree))

# Non CIM
EVAL-swap_free_PCT = case(isnotnull(Virtual_free_PCT), Virtual_free_PCT, isnotnull(swapfree), round(((swapfree/swaptotal)*100),2))
EVAL-swap_used_PCT = case(isnotnull(Virtual_total_MB), round((((Virtual_total_MB-Virtual_free_MB)/Virtual_total_MB)*100),2), isnotnull(swaptotal), round((((swaptotal-swapfree)/swaptotal)*100),2))

# For Linux, consider effective swap using over the volume of swapcached
EVAL-swap_free_effective = case(isnotnull(Virtual_free_MB), Virtual_free_MB, isnotnull(swapcached), (swapfree+swapcached), isnotnull(swapfree), swapfree)
EVAL-swap_used_effective = case(isnotnull(Virtual_total_MB), (Virtual_total_MB-Virtual_free_MB), isnotnull(swapcached), ((swaptotal-swapfree)-swapcached), isnotnull(swaptotal), (swaptotal-swapfree))
EVAL-swap_free_effective_PCT = case(isnotnull(Virtual_free_PCT), Virtual_free_PCT, isnotnull(swapcached), round((((swapfree+swapcached)/swaptotal)*100),2), isnotnull(swapfree), round(((swapfree/swaptotal)*100),2))
EVAL-swap_used_effective_PCT = case(isnotnull(Virtual_total_MB), round((((Virtual_total_MB-Virtual_free_MB)/Virtual_total_MB)*100),2), isnotnull(swapcached), round((((((swaptotal-swapfree)-swapcached))/swaptotal)*100),2), isnotnull(swaptotal), round((((swaptotal-swapfree)/swaptotal)*100),2))

# Non CIM
EVAL-swapcached_PCT = case(isnotnull(swapcached), round(((swapcached/swaptotal)*100),2))

# CIM normalization for common network statistics
EVAL-thruput = case(type=="NET", (value*1000))
EXTRACT-dvc_name = (?<dvc_name>\w*)\-(?<direction_pattern>read|write)\w*
FIELDALIAS-dvc = dvc_name as dvc
EVAL-direction = case(direction_pattern=="read", "inbound", direction_pattern=="write", "outbound")
EVAL-bytes_in = case(type=="NET", case(direction_pattern=="read", (value*1000)) )
EVAL-bytes_out = case(type=="NET", case(direction_pattern=="write", (value*1000)) )
EVAL-bytes = case(case(type=="NET", direction_pattern=="read"), (value*1000), case(type=="NET", direction_pattern=="write"), (value*1000) )
EVAL-packets_in = case(type=="NETPACKET", case(direction_pattern=="read", (value*1000)) )
EVAL-packets_out = case(type=="NETPACKET", case(direction_pattern=="write", (value*1000)) )
EVAL-packets = case(case(type=="NETPACKET", direction_pattern=="read"), (value*1000), case(type=="NETPACKET", direction_pattern=="write"), (value*1000) )

# CIM for ApplicationState, linked to TOP monitors
FIELDALIAS-Command = Command as process
FIELDALIAS-process_id = PID as process_id
EVAL-user = case(type=="TOP", if(isnotnull(username), username, "undefined"))

# CIM normalization for storage metrics
EVAL-mount = case(type=="JFSFILE", device)
EVAL-storage_used_percent = case(type=="JFSFILE", value)
EVAL-storage_free_percent = case(type=="JFSFILE", (100 - value))

###########################################
#			nmon processing stanza				#
###########################################

[nmon_processing]

TIME_FORMAT=%d-%m-%Y %H:%M:%S

# Deactivate KV
KV_MODE = none

# For TA-nmon
EXTRACT-splunk_home = (?i).+\w*\sRoot\sDirectory\s\(\$SPLUNK_HOME\)\:\s{0,}(?P<splunk_home>[a-zA-Z0-9\/\\\-\_\.\:]+)\s

# For nmon-logger
EXTRACT-nmon_home = (?i).+\w*\sRoot\sDirectory\s\(\$NMON_VAR\)\:\s{0,}(?P<nmon_var>[a-zA-Z0-9\/\\\-\_\.\:]+)\s

EXTRACT-operating_system = (?i).+Guest\sOperating\sSystem\:\s{0,}(?P<operating_system>[a-zA-Z0-9]+)\s
EXTRACT-python_version = (?i).+Python\sversion\:\s{0,}(?P<python_version>[a-zA-Z0-9\.]+)\s
EXTRACT-perl_version = (?i).+Perl\sversion\:\s{0,}(?P<perl_version>[a-zA-Z0-9\.]+)\s
EVAL-converter_inuse = case(isnotnull(python_version), "Python", isnotnull(perl_version), "Perl")
EVAL-interpreter_version = case(isnotnull(python_version), python_version, isnotnull(perl_version), perl_version)
EXTRACT-nmon2csv_version = (?i).+nmon2csv\sversion\:\s{0,}(?P<nmon2csv_version>[0-9\.]+)\s
EXTRACT-hostname = (?i).+HOSTNAME\:\s{0,}(?P<hostname>[a-zA-Z0-9\-\_\.]+)
EXTRACT-nbr_lines = (?i).+Reading\sNMON\sdata:\s{0,}(?P<nbr_lines>\d+)\slines
EXTRACT-size_in_bytes = (?i).+lines\s(?P<size_in_bytes>\d+)\sbytes
EXTRACT-elapsed_in_seconds = (?i).+Elapsed\stime\swas\:\s{0,}(?P<elapsed_in_seconds>\d+\.\d+)\sseconds
EXTRACT-Nmon_version = (?i).+NMON\sVERSION\:\s{0,}(?P<Nmon_version>[a-zA-Z0-9\-\_\.\s]+)\s
EXTRACT-Time_of_Nmon_data = (?i).+TIME\sof\sNmon\sData\:\s{0,}(?P<Time_of_Nmon_Data>[0-9\:\.]+)\s
EXTRACT-Date_of_Nmon_data = (?i).+DATE\sof\sNmon\sData\:\s{0,}(?P<Date_of_Nmon_Data>[a-zA-Z0-9\-\/]+)\s
EXTRACT-INTERVAL = (?i).+INTERVAL\:\s{0,}(?P<INTERVAL>\d+)\s
EXTRACT-SNAPSHOTS = (?i).+SNAPSHOTS\:\s{0,}(?P<SNAPSHOTS>\d+)\s
EXTRACT-logical_cpus = (?i).+logical_cpus\:\s{0,}(?P<logical_cpus>\d+)\s
EXTRACT-virtual_cpus = (?i).+virtual_cpus\:\s{0,}(?P<virtual_cpus>\d+)\s
EXTRACT-Nmon_ID = (?i).+NMON\sID\:\s{0,}(?P<Nmon_ID>[a-zA-Z0-9\-\:\,\_\.]+)\s

###########################################
#			nmon config stanza					#
###########################################

[nmon_config]

BREAK_ONLY_BEFORE=CONFIG,
MAX_EVENTS=100000
NO_BINARY_CHECK=1
SHOULD_LINEMERGE=true
TIME_FORMAT=%d-%b-%Y:%H:%M
TIME_PREFIX=CONFIG,
TRUNCATE=0

# Deactivate KV
KV_MODE = none

EXTRACT-hostname = (?i)AAA,host,(?P<hostname>[a-zA-Z0-9\-\_\.]+)\s

# Overwritting default host field based on event data for nmon_data sourcetype (useful when managing Nmon central shares)
TRANSFORMS-hostfield=nmon_config_hostoverride

# Perform basic extractions
# Full extractions can be performed by calling associated macros, or using the data model
EXTRACT-AAA_OS = (?i),OS,(?P<AAA_OS>[^,]+)\s{0,}
EXTRACT-AIX_LEVEL = AAA,AIX,(?P<AIX_LEVEL>[a-zA-Z0-9\-\_\.]+)\s
EXTRACT-Linux_LEVEL = AAA,OS,Linux,(?P<Linux_LEVEL>[^,]+),
EXTRACT-Solaris_LEVEL = AAA,OS,Solaris,(?P<Solaris_LEVEL>[^,]+),
EVAL-OStype = case(AAA_OS == "Linux", "Linux", AAA_OS == "Solaris", "Solaris", isnotnull(AIX_LEVEL), "AIX", isnull(AAA_OS), "Unknown")

# When applicable, be CIM compliant

FIELDALIAS-dest = host as dest
EXTRACT-AAA_serial = AAA,SerialNumber,(?<AAA_serial>\w*)
EVAL-serial = if(isnotnull(AAA_serial), AAA_serial, host)
EVAL-hypervisor_id = if(isnotnull(AAA_serial), AAA_serial, hostname)
EVAL-hypervisor = if(isnotnull(AAA_serial), AAA_serial, hostname)

# family
EXTRACT-AIX_processor_type = BBB\w*,[^,]+,lsconf,\"Processor\sType:\s(?<AIX_processor_type>\w*)\"
EXTRACT-Linux_processor_type = AAA,OS,Linux,[^,]+,[^,]+,(?<Linux_processor_type>\w*)
EXTRACT-Solaris_processor_type = BBB.+,[0-9].+psrinfo\s\-pv,\"\s+(?P<Solaris_processor_type>[\w\-\_]*)\s*\(.+\"
EVAL-family = case(isnotnull(Linux_LEVEL), Linux_processor_type, isnotnull(Solaris_LEVEL), Solaris_processor_type, isnotnull(AIX_LEVEL), AIX_processor_type)

# Vendor / Product
EXTRACT-Linux_release_distribution = BBB\w*,[^,]*,.+etc+.release,\"(?!LSB_VERSION|DISTRIB|NAME|ID|VERSION)(?P<Linux_release_distribution>[^,]+)\"
EXTRACT-Linux_lsb_distribution = BBB\w*,[^,]*,lsb_release,\"Description:\s*(?<Linux_lsb_distribution>[^,]*)\"
EVAL-Linux_distribution = if(isnotnull(Linux_lsb_distribution), Linux_lsb_distribution, Linux_release_distribution)
EXTRACT-Solaris_version = BBB\w*,[^,]*,.+etc+.release,\"\s+(?P<Solaris_version>Oracle\s*Solaris\s[^\"]*)\"
EVAL-AIX_version = case(isnotnull(AIX_LEVEL), "IBM AIX" + " " + AIX_LEVEL)

EVAL-vendor_product = case(isnotnull(Linux_LEVEL), (if(isnotnull(Linux_lsb_distribution), Linux_lsb_distribution, Linux_release_distribution)), isnotnull(Solaris_LEVEL), Solaris_version, isnotnull(AIX_LEVEL), "IBM AIX " + 'AIX_LEVEL' )
EVAL-version = case(isnotnull(Linux_LEVEL), Linux_LEVEL, isnotnull(Solaris_LEVEL), Solaris_LEVEL, isnotnull(AIX_LEVEL), AIX_LEVEL )
EVAL-os = case(isnotnull(Linux_LEVEL), (if(isnotnull(Linux_lsb_distribution), Linux_lsb_distribution, Linux_release_distribution)), isnotnull(Solaris_LEVEL), Solaris_version, isnotnull(AIX_LEVEL), "IBM AIX " + 'AIX_LEVEL' )

# CPU
EXTRACT-AIX_virtualcpus = BBB\w*,[^,]+,lparstat\s-i,\"Online\sVirtual\sCPUs\s*:\s*(?<AIX_virtualcpus>\d*)\"
EXTRACT-cpu_cores_position1 = AAA,cpus,(?P<cpu_cores_position1>\d+)
EXTRACT-cpu_cores_position2 = AAA,cpus,\d+,(?P<cpu_cores_position2>\d+)
EVAL-cpu_cores_combo = (AIX_virtualcpus+" / "+cpu_cores_position2)

EVAL-cpu_cores = if(isnotnull(AIX_virtualcpus), AIX_virtualcpus, cpu_cores_position1)
EVAL-cpu_count = case(isnotnull(AIX_LEVEL), AIX_virtualcpus, isnotnull(Solaris_LEVEL), cpu_cores_position1, isnotnull(Linux_LEVEL), cpu_cores_position1)

EXTRACT-Solaris_processor_clockspeed = BBB.+,[0-9].+psrinfo\s\-pv,.+clock\s(?P<Solaris_processor_clockspeed>[\d\.]*)\s*\w*\)\"
EXTRACT-Linux_processor_clockspeed_1 = AAA,[^,]+,MHz,(?P<Linux_processor_clockspeed_1>[\d\.]*)
EXTRACT-Linux_processor_clockspeed_2 = BBB\w*,[^,]+,/proc/cpuinfo,\"cpu\s*MHz\s*:\s*(?<Linux_processor_clockspeed_2>[\d\.]*)\"
EXTRACT-AIX_processor_clockspeed = BBBP,[^,]+,lsconf,"Processor\sClock\sSpeed:\s*(?<AIX_processor_clockspeed>[\d\.]*)\sMHz
EVAL-cpu_mhz = case(isnotnull(Linux_LEVEL), if(isnotnull(Linux_processor_clockspeed_1), Linux_processor_clockspeed_1, Linux_processor_clockspeed_2), isnotnull(Solaris_LEVEL), Solaris_processor_clockspeed, isnotnull(AIX_LEVEL), AIX_processor_clockspeed)

EXTRACT-Linux_realmemory_KB = BBB\w*,[^,]*,/proc/meminfo,\"MemTotal:\s*(?<Linux_realmemory_KB>\d*)\s*kB\"
EXTRACT-Solaris_realmemory_KB = BBB\w*,[^,]*,prtdiag,\"Memory\s*size:\s*(?<Solaris_realmemory_MB>\d*)\sMegabytes\"
EXTRACT-AIX_realmemory_online_MB = BBB\w*,[^,]*,online\s*Memory,(?<AIX_realmemory_online_MB>\d*)
EXTRACT-AIX_realmemory_lsconf_MB = BBB\w*,[^,]*,lsconf,\"Memory\s*Size:\s*(?<AIX_realmemory_lsconf_MB>\d*)\s*MB\"
EVAL-mem = case(isnotnull(Linux_LEVEL), round((Linux_realmemory_KB/1024),0), isnotnull(Solaris_LEVEL), Solaris_realmemory_MB, isnotnull(AIX_realmemory_online_MB), if(isnotnull(AIX_realmemory_online_MB), AIX_realmemory_online_MB, AIX_realmemory_lsconf_MB) )

# Not in CIM
EXTRACT-Linux_swapmemory_KB = BBB\w*,[^,]*,/proc/meminfo,\"SwapTotal:\s*(?<Linux_swapmemory_KB>\d*)\s*kB\"

# uptime (available for Linux hosts only)
# Sic !!!
EXTRACT-uptime_days = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*(?<uptime_days>\d*)\s*day[s|,]*\s*(?<uptime_dayshour>\d*):(?<uptime_daystime>\d*)
EXTRACT-uptime_days_with_min = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*(?<uptime_days>\d*)\s*day[s|,]*\s*(?<uptime_daysmin>\d*)\smin
EXTRACT-uptime_minutes = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*(?<uptime_minutes>\d*)\s*min\s*,
EXTRACT-uptime_hours = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*(?<uptime_hours>\d*:\d*)\s*,
EXTRACT-uptime_hours_hours = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*(?<uptime_hours_hours>\d*):\d*\s*,
EXTRACT-uptime_hours_minutes = BBB\w*,[^,]+,uptime,\"\s*[\d|\w|:]*\s*up\s*\d*:(?<uptime_hours_minutes>\d*)\s*,
EVAL-uptime_fromdays = (uptime_days*86400)
EVAL-uptime_fromminutes = (uptime_minutes*60)
EVAL-uptime_fromhours = (uptime_hours_hours*60*60) + (uptime_hours_minutes*60)
EVAL-uptime = case(isnotnull(uptime_daysmin), ((uptime_days*86400)+(uptime_daysmin*60)), isnotnull(uptime_days), ((uptime_days*86400)+(uptime_dayshour*3600)+(uptime_daystime*60)), isnotnull(uptime_minutes), (uptime_minutes*60), isnotnull(uptime_hours), (uptime_hours_hours*60*60) + (uptime_hours_minutes*60) )

###########################################
#			SA-Eventgen								#
###########################################

# All these stanza are related to Eventgen configuration, for App testing purposes, Evengen will generate various sample data
# These settings can be safety ignored in Production systems as they will never affect anything as long as Eventgen inputs are not activated (deactivated by default)

[source::...AIX_CPU_ALL_sample.csv]
sourcetype = nmon_data
REPORT-AIX_CPU_ALL_sample = AIX_CPU_ALL_sample

[source::...AIX_LPAR_sample.csv]
sourcetype = nmon_data
REPORT-AIX_LPAR_sample = AIX_LPAR_sample

[source::...AIX_MEM_sample.csv]
sourcetype = nmon_data
REPORT-AIX_MEM_sample = AIX_MEM_sample

[source::...Linux_CPU_ALL_sample.csv]
sourcetype = nmon_data
REPORT-Linux_CPU_ALL_sample = Linux_CPU_ALL_sample

[source::...Linux_MEM_sample.csv]
sourcetype = nmon_data
REPORT-Linux_MEM_sample = Linux_MEM_sample

[source::...Linux_TOP_sample.csv]
sourcetype = nmon_data
REPORT-Linux_TOP_sample = Linux_TOP_sample

[source::...Solaris_CPU_ALL_sample.csv]
sourcetype = nmon_data
REPORT-Solaris_CPU_ALL_sample = Solaris_CPU_ALL_sample

[source::...Solaris_MEM_sample.csv]
sourcetype = nmon_data
REPORT-Solaris_MEM_sample = Solaris_MEM_sample

[source::...Solaris_TOP_sample.csv]
sourcetype = nmon_data
REPORT-Solaris_TOP_sample = Solaris_TOP_sample

[source::...Solaris_WLM_sample.csv]
sourcetype = nmon_data
REPORT-Solaris_WLM_sample = Solaris_WLM_sample

[source::...DISKXFER_sample.csv]
sourcetype = nmon_data
REPORT-DISKXFER_sample = DISKXFER_sample

##############################################
#			SYSLOG SPECIAL SECTIONS					#
##############################################

# These parameters are dedicated to the deployment of Nmon using syslog as the transport layer
# to forward Nmon Performance data from your end servers to your central syslog, and finally to Splunk

# Deploying Nmon with syslog requires additional configuration on search heads, and potentially indexers
# This also requires specific configuration on end clients (rsyslog/syslog-ng config, cron config, logrotate)

# Data being transferred through syslog is not csv structured data but key=value data
# each source of data is being in a temporary sourcetype for indexing time parsing to occur, then we will
# rewrite the sourcetypes to match standard sourcetypes being used by Core application

# depending on its origin (the source, normal vs syslog), the configuration on the sh head will apply the correct
# extraction parameters at search time.

# The nmon-logger package for Syslog deployment is available at:
# https://github.com/guilhemmarchand/nmon-logger

# Online guides for Syslog deployment:
# rsyslog: http://nmonsplunk.wikidot.com/documentation:installation:rsyslog
# syslog-ng: http://nmonsplunk.wikidot.com/documentation:installation:syslog-ng

####################
# Syslog to Splunk #
####################
#
# If you receive directly from syslog over TCP/UDP, use this sourcetype
# Create a dedicated UDP or TCP input with:
# index = nmon
# source = (leave optional or put anything you like)
# sourcetype = nmon:fromsyslog

# This sourcetype must manage incoming multi / or mono line event
# syslog timestamp is not being used for data time stamping (using nmon timestamp)

#
# Splunk to Splunk is not recommended, prefer having a Splunk instance installed on rsyslog collectors
# or on machine receiving rsyslog data, and generating local per host files
# Therefore, it is still possible to achieve it using a tcp/udp input using this sourcetype:

[nmon:fromsyslog]

BREAK_ONLY_BEFORE=timestamp="
MAX_EVENTS=100000
SHOULD_LINEMERGE=true
NO_BINARY_CHECK=true
CHARSET=UTF-8
TIME_FORMAT=%s
TIME_PREFIX=timestamp="
MAX_TIMESTAMP_LOOKAHEAD=26

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_data
TRANSFORMS-perfdata_fromsyslog = nmon_data_fromsyslog_rewrite

# Rewrite sourcetype to standard nmon_config
TRANSFORMS-configdata_fromsyslog = nmon_config_fromsyslog_rewrite

# Rewrite sourcetype to standard nmon_processing
TRANSFORMS-processingdata_fromsyslog = nmon_processing_fromsyslog_rewrite

# Rewrite sourcetype to standard nmon_collect
TRANSFORMS-collectdata_fromsyslog = nmon_collect_fromsyslog_rewrite

# Rewrite sourcetype to standard nmon_clean
TRANSFORMS-cleandata_fromsyslog = nmon_clean_fromsyslog_rewrite

#####################################
# Splunk to Splunk with syslog data #
#####################################

# These sourcetypes will be used when reading local files generated by syslog from remote syslog clients 
# Each type of data must have its own file monitor.

# See inputs.conf.spec for more information, or read the online wiki manual pages for rsyslog / syslog-ng deployments

#
# For nmon performance data:
#

###################################################
# Set parameters for nmon_data coming from syslog #
###################################################

[nmon_data:fromsyslog]
SHOULD_LINEMERGE=false
NO_BINARY_CHECK=true
CHARSET=UTF-8
TIME_FORMAT=%s
TIME_PREFIX=timestamp="
MAX_TIMESTAMP_LOOKAHEAD=26
KV_MODE=auto

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_data
TRANSFORMS-perfdata_fromsyslog = nmon_data_fromsyslog_rewrite

# For search heads, activate kvmode to auto for that source
[source::perfdata:syslog]
KV_MODE=auto

#
# For nmon configuration data:
#

#####################################################
# Set parameters for nmon_config coming from syslog #
#####################################################

[nmon_config:fromsyslog]
BREAK_ONLY_BEFORE=timestamp="
MAX_EVENTS=100000
NO_BINARY_CHECK=1
SHOULD_LINEMERGE=true
TIME_FORMAT=%s
TIME_PREFIX=timestamp="
TRUNCATE=0

# Deactivate KV
KV_MODE = none

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_config
TRANSFORMS-configdata_fromsyslog = nmon_config_fromsyslog_rewrite

#
# For nmon processing data:
#

[nmon_processing:fromsyslog]
SHOULD_LINEMERGE=true
NO_BINARY_CHECK=true
TIME_FORMAT=%d-%m-%Y %H:%M:%S
TIME_PREFIX=nmon2csv:
CHARSET=UTF-8
BREAK_ONLY_BEFORE=nmon2csv:

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_processing
TRANSFORMS-processingdata_fromsyslog = nmon_processing_fromsyslog_rewrite

#
# For nmon collecting data:
#

[nmon_collect:fromsyslog]

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_collect
TRANSFORMS-collectdata_fromsyslog = nmon_collect_fromsyslog_rewrite

#
# For nmon clean data:
#

[nmon_clean:fromsyslog]
SHOULD_LINEMERGE=true
NO_BINARY_CHECK=true
BREAK_ONLY_BEFORE=Starting nmon cleaning
TIME_FORMAT=%c
TIME_PREFIX=\w*\s
CHARSET=UTF-8

# Rewrite host Metadata using standard syslog rewrite
TRANSFORMS = syslog-host

# Rewrite sourcetype to standard nmon_clean
TRANSFORMS-cleandata_fromsyslog = nmon_clean_fromsyslog_rewrite
