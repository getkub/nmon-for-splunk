# transforms.conf

###########################################
#			nmon data stanza						#
###########################################

# Host override based on event data form nmon_data sourcetype

[nmon_data_hostoverride]
DEST_KEY = MetaData:Host
REGEX = ^[a-zA-Z0-9\_]+\,[a-zA-Z0-9\-\_\.]+\,([a-zA-Z0-9\-\_\.]+)\,.+
FORMAT = host::$1


###########################################
#			nmon config stanza					#
###########################################

# Host override based on event data form nmon_config sourcetype

[nmon_config_hostoverride]
DEST_KEY = MetaData:Host
REGEX = CONFIG\,[a-zA-Z0-9\-\:\.]+\,([a-zA-Z0-9\-\_\.]+)\,[a-zA-Z0-9\-\_\.]+
FORMAT = host::$1

###########################################
#			lookups stanza							#
###########################################

# NMON Inventory Lookup Table

[nmon_inventory]
external_type = kvstore
collection = kv_nmon_inventory
fields_list = hostname, OStype, OSversion, Physical_mem_MB, Virtual_mem_MB, AIX_Machine_SerialNumber, AIX_virtualcpus, AIX_logicalcores, AIX_entitled, AIX_LEVEL, AIX_processor_mode, AIX_processor_clockspeed, AIX_cpu_type, AIX_kernel_type, AIX_plateform_firmware_level, AIX_PoolID, AIX_system_installed_CPUs, AIX_system_active_CPUs, AIX_PoolCPUs, AIX_memory_MB, AIX_pagingspace_MB, Linux_memory_MB, Linux_swap_MB, Linux_distribution, Linux_vendor, Linux_kernelversion, Solaris_version, Solaris_sunOS_version, Solaris_processor_clockspeed, Solaris_physical_memory_MB, Processor, cpu_cores, nmon_version, uptime_seconds, uptime_duration, system_startup_date, reporting_date

# NMON Data Dictionary
[data_dictionary]
filename = data_dictionary.csv

# NMON File Systems Excluding: Prevents alerting from reporting FS usage excess for non relevant device (cdrom media...)
[filesystem_excluding]
filename = filesystem_excluding.csv
case_sensitive_match=false
match_type = WILDCARD(device)

# NMON usual usage for main system metrics, known as the Nmon baseline
# Note: Why multiple collection ? Initially, the first baseline implementation was based on one unique collection
# But data of volume to manage is terribly high to generate the baseline, that's why i've decided to split the baseline into multiple to allow
# using existing data models

[nmon_baseline_CPU_ALL]
external_type = kvstore
collection = kv_nmon_baseline_CPU_ALL
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_cpu, baseline_avg_cpu, upper_baseline_avg_cpu

[nmon_baseline_LPAR]
external_type = kvstore
collection = kv_nmon_baseline_LPAR
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_vp_usage, baseline_avg_vp_usage, upper_baseline_avg_vp_usage, lower_baseline_avg_pool_usage, baseline_avg_pool_usage, upper_baseline_avg_pool_usage

[nmon_baseline_MEM]
external_type = kvstore
collection = kv_nmon_baseline_MEM
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_real_mem, baseline_avg_real_mem, upper_baseline_avg_real_mem, lower_baseline_avg_virtual_mem, baseline_avg_virtual_mem, upper_baseline_avg_virtual_mem

[nmon_baseline_DISKXFER]
external_type = kvstore
collection = kv_nmon_baseline_DISKXFER
fields_list = _key, date_wday, local_time, frameID, hostname, lower_baseline_avg_disk_iops, baseline_avg_disk_iops, upper_baseline_avg_disk_iops

###########################################
#			SA-Eventgen								#
###########################################

# All these stanza are related to Eventgen configuration, for App testing purposes, Evengen will generate various sample data
# These settings can be safety ignored in Production systems as they will never affect anything as long as Eventgen inputs are not activated

[AIX_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy,PhysicalCPUs

[AIX_LPAR_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,PhysicalCPU,virtualCPUs,logicalCPUs,poolCPUs,entitled,weight,PoolIdle,"usedAllCPU_PCT","usedPoolCPU_PCT",SharedCPU,Capped,"EC_User_PCT","EC_Sys_PCT","EC_Wait_PCT","EC_Idle_PCT","VP_User_PCT","VP_Sys_PCT","VP_Wait_PCT","VP_Idle_PCT",Folded,"Pool_id"

[AIX_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,"Real_Free_PCT","Virtual_free_PCT","Real_free_MB","Virtual_free_MB","Real_total_MB","Virtual_total_MB"

[Linux_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy,CPUs

[Linux_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,memtotal,hightotal,lowtotal,swaptotal,memfree,highfree,lowfree,swapfree,memshared,cached,active,bigfree,buffers,swapcached,inactive

[Linux_TOP_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,logical_cpus,virtual_cpus,ZZZZ,interval,snapshots,PID,pct_CPU,pct_Usr,pct_Sys,Size,ResSet,ResText,ResData,ShdLib,MinorFault,MajorFault,Command

[Solaris_CPU_ALL_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,User_PCT,Sys_PCT,Wait_PCT,Idle_PCT,Busy_PCT,CPUs

[Solaris_MEM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,ZZZZ,interval,snapshots,memtotal,NA1,NA2,swaptotal,memfree,NA3,NA4,swapfree,swapused

[Solaris_TOP_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,"logical_cpus","virtual_cpus",ZZZZ,interval,snapshots,PID,"pct_CPU","pct_Usr","pct_Sys",Threads,Size,ResSize,ResData,CharIO,"pct_RAM",Paging,Command,Username,Project,Zone,USR,SYS,TRP,TFL,DFL,LCK,SLP,LAT

[Solaris_WLM_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,interval,snapshots,ZZZZ,device,value

[DISKXFER_sample]
DELIMS = ","
FIELDS = type,serialnum,hostname,interval,snapshots,ZZZZ,device,value

##############################################
#			SYSLOG SPECIAL SECTIONS					#
##############################################

# These parameters are dedicated to the deployment of Nmon using syslog as the transport layer
# You can forward Nmon Performance data from your servers to your central syslog server(s), and finally to Splunk

# In a Syslog deployment, we will generate data key=value data instead of standard csv data
# Additionally, using Syslog as the transport layer requires specific operation on data at indexing time.

# Deploying Nmon with syslog requires additional configuration on search heads, and potentially indexers
# This also requires specific configuration on end clients (syslog config, cron config, logrotate)

# See the README file at the root if this package, or read the online guide for Syslog deployment:

# Rewrite sourcetype after the parsing at indexing time will have been proceeded by Splunk
# This prevents from applying unwanted parameters and ensure
# timestamp identification is done over Nmon events, and not on syslog metadata that can potentially not be accurate.

# ***You must respect** these following configuration in your syslog related deployment
# the pattern used within each REGEX must match the syslog $programname 

# the $programname is being used to filter syslog data coming from syslog hosts, and finally recompose solid files on syslog collectors
# Any change to the $programname in syslog configuration without customizing these stanza will result in data not being recognized and correctly
# identified in Splunk.

[nmon_data_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_performance:\s
FORMAT = sourcetype::nmon_data

[nmon_config_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_config:\s
FORMAT = sourcetype::nmon_config

[nmon_collect_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_collect:\s
FORMAT = sourcetype::nmon_collect

[nmon_processing_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_processing:\s
FORMAT = sourcetype::nmon_processing

[nmon_clean_fromsyslog_rewrite]
DEST_KEY = MetaData:Sourcetype
REGEX = \snmon_clean:\s
FORMAT = sourcetype::nmon_clean

